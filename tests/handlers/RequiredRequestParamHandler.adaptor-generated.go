
package handlers

//code generated by 'go generate', do not edit

import (
	"github.com/jargv/plumbus"
	"net/http"
	"reflect"
	"encoding/json"
	"strconv"
	"fmt"
	"log"
)

// avoid unused import errors
var _ json.Delim
var _ log.Logger
var _ fmt.Formatter
var _ strconv.NumError

func init(){
	var dummy func(
		
			foodQueryParam,
		
			amountQueryParam,
		
	)(
		
	)

	typ := reflect.TypeOf(dummy)
	plumbus.RegisterAdaptor(typ, func(handler interface{}) http.HandlerFunc {
		callback := handler.(func(
			
				foodQueryParam,
			
				amountQueryParam,
			
		)(
			
		))

		return http.HandlerFunc(func(res http.ResponseWriter, req *http.Request){
			
				queryParams := req.URL.Query()
			
			
			
				var arg0 foodQueryParam
				  
						if l, sent := queryParams["food"]; sent && len(l) > 0{
							arg0 = foodQueryParam(l[0])
						} else {
							plumbus.HandleResponseError(
								res, req,
								plumbus.Errorf(
									http.StatusBadRequest,
									"missing required query parameter 'food'",
								),
							)
							return
						}
					
				
			
				var arg1 amountQueryParam
				  {
						
							l, sent := queryParams["amount"]
							if !sent || len(l) == 0 {
								plumbus.HandleResponseError(
									res, req,
									plumbus.Errorf(
										http.StatusBadRequest,
										"missing required query parameter 'amount'",
									),
								)
								return
							}
							queryInt, err := strconv.Atoi(l[0])
							if err != nil {
								plumbus.HandleResponseError(
									res, req,
									plumbus.Errorf(
										http.StatusBadRequest,
										"query param 'amount' expected to be integer value",
									),
								)
								return
							}

							arg1 = amountQueryParam(queryInt)
						
					}
				
			

			
			

			callback(
				
					arg0,
				
					arg1,
				
			)

			
			

			
		})
	})
}
